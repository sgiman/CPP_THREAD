// **********************************************************************************
// Многопоточность. Потоки (thread) | Многопоточное программирование | Уроки C++ #1
// ----------------------------------------------------------------------------------
// Visual Studio 2022
// ----------------------------------------------------------------------------------
// Журавлёв Сергей | #SimpleCode | Udemy
// https://www.udemy.com/user/zhuravliov-sergei/
// 2019-2023 @ sgiman
// **********************************************************************************

#include "iostream"
#include <thread>	// библиотека потоков
#include <chrono>	// библиотека времени 	 

using namespace std;

/*
*	Многопоточное программирование
*	потоки
*	thread
*/

void DoWork()
{
	for (size_t i = 0; i < 10; i++)
	{
		cout << "ID потока - " << this_thread::get_id() << "\tDoWork " << i << endl;
		this_thread::sleep_for(chrono::milliseconds(1000));							// Задержка в 1 сек
	}
}


int main(int argc, char* argv[])
{
	setlocale(LC_CTYPE, "rus");
	cout << "*********** THREAD ***********" << endl;
	cout << endl;

	cout << "\n*** START MAIN ****\n" << endl;

	// -- Медленный стандартный варинат в одном последовательнои потоке 
	//DoWork(); 
	//DoWork();

	// -- Быстрый параллельный вариант в двух асинхронных потоках 
	thread th1(DoWork);			// 1-й пототк Dowork. Экземпляр-объект "th" с указателем на функцию для параллельнного запуска в 2-х потоках. Создать новый поток. 
	//th1.detach();				// Разрыв связи (метод deach) между объектом и соотв. потоком. Задача соотв. потока может быть не завершена до конца   
	thread th2(DoWork);			// 2-й поток для задачи Dowork

	cout << endl;

	for (size_t i = 0; i < 10; i++)
	{
		cout << "ID потока = " << this_thread::get_id() << "\tmain\t" << i << endl;	// id текущего потока
		this_thread::sleep_for(chrono::milliseconds(500));				// "усыпить" поток на 0.5 сек. (1000 msec. = 1 sec.)
	}

	// -- Ожидание завершения задач в доп. потоках
	// join позволяет дождаться завершения задачи в потоке th1.
	th1.join();
	th2.join();

	cout << "\n*** END MAIN ****" << endl;


	cout << endl;
	return 0;
}
